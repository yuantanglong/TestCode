apply plugin: 'com.android.application'
// 注：需要配置符号表时，使用bugly插件
apply plugin: 'bugly'
bugly {
    appId = 'b40c32789d'
    appKey = 'fd79c0c7-e5d4-4887-bb18-004ba9954185'
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}

def verCode = 1

android {
    //渠道Flavors
    productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.new_hhj"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode verCode
        versionName APP_VERSION
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField('int', 'READ_TIME_OUT', project.READ_TIME_OUT);
        buildConfigField('int', 'CONNECT_TIME_OUT', project.CONNECT_TIME_OUT);

        resValue("string", 'app_version', APP_VERSION)
        multiDexEnabled true
        flavorDimensions "versionCode"
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "a6af0cbe3623c50153542f20", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
        ndk {
            abiFilters 'armeabi'
        }
    }
    signingConfigs {
        release {
            storeFile file('../app/testcode.jks')
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
            storeFile file(KEYSTORE_FILE)
            storePassword KEY_STOREPASSWORD
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    //修改生成的apk名字及输出文件夹
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //新名字
            def newName
            //时间戳
            def timeNow
            //输出文件夹
            def outDirectory
            //是否为Jenkins打包，输出路径不同
            if ("true".equals(IS_JENKINS)) {
                //BUILD_PATH为服务器输出路径
                timeNow = BUILD_TIME
                outDirectory = BUILD_PATH_JENKINS
                //JKApp-v1.0.1-xiaomi-release.apk
                newName = APPNAME + "-v" + APP_VERSION + '-' + variant.productFlavors[0].name + '-' + variant.buildType.name + '.apk'
            } else {
                //本机打包输出在本机路径
                timeNow = getDate()
                outDirectory = BUILD_PATH_LOCAL
                newName = APPNAME + "-v" + APP_VERSION + '-' + variant.productFlavors[0].name + '-' + variant.buildType.name + '.apk'
            }
            outputFileName = newName
//            outputFileName = new File(outDirectory+"/"+timeNow, newName)
//            outputFileName=outDirectory+"/"+timeNow+newName

        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(path: ':common')
    api rootProject.ext.dependencies.butterknife
    annotationProcessor rootProject.ext.dependencies.butterknife_compiler
    api rootProject.ext.dependencies.bga_banner
    //第三方TabLayout
    implementation 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'
    api rootProject.ext.dependencies.jpush
    api rootProject.ext.dependencies.jcore
    api rootProject.ext.dependencies.zxing
    implementation files('libs/gprintersdkv2.1.4.jar')
    //JSBridge
    implementation 'com.github.lzyzsd:jsbridge:1.0.4'
}
